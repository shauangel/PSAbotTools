[{"link": "https://stackoverflow.com/questions/26980713/solve-cross-origin-resource-sharing-with-flask", "keywords": [], "tags": ["javascript", "python", "ajax", "flask", "cors"], "question": {"id": 26980713, "title": "Solve Cross Origin Resource Sharing with Flask", "content": "For the following ajax post request for Flask (how can I use data posted from ajax in flask?): I get a Cross Origin Resource Sharing (CORS) error: I tried solving it in the two following ways, but none seems to work. This is a Flask extension for handling CORS that should make cross-origin AJAX possible. My pythonServer.py using this solution: This is an official Flask code snippet defining a decorator that should allow CORS on the functions it decorates. My pythonServer.py using this solution: Can you please give some some indication of why that is?", "abstract": ""}, "answers": [{"id": 77133269, "score": -1, "vote": 0, "content": "A cross origin POST request with Content-Type application/json is considered to be unsafe. As a result, before handling the actual POST request, some additional preflight OPTIONS request is send to the server. The server needs to be able to handle that preflight request correctly. Otherwise the POST request fails. Also see https://javascript.info/fetch-crossorigin#unsafe-requests for a detailed description of the headers associated with preflight requests. In addition to the flask application, the headers and response codes might be influenced by server configuration files like apache .htaccess files. Authorization issues or https vs http issues might cause failing requests, too. Bypassing OPTIONS from authentication might help: If password protection is enabled, include credentials in options of fetch request: Also see: https://docs.hetzner.com/de/konsoleh/account-management/development/cors/ https://javascript.info/fetch-crossorigin#unsafe-requests https://serverfault.com/questions/684855/disable-authentication-for-http-options-method-preflight-request https://stackoverflow.com/a/48172785/2876079 Why are cross-origin POST requests with Content-Type 'application/json' considered to be unsafe? Why is my header not included when requesting a page with http instead of https protocol?", "abstract": ""}, {"id": 75301399, "score": 1, "vote": 0, "content": "My fix was", "abstract": ""}, {"id": 74902232, "score": 1, "vote": 0, "content": "My issue was a preflight one, but I had to add to app.py", "abstract": ""}, {"id": 72157334, "score": 0, "vote": 0, "content": "I encountered this issue today, and none of the answers worked for me. I set the cross_origin() decorator as follows: Then I did: The problem for me was running the Flask Python file with CTRL+ALT+N. The \"Run Code\" button in VSCode, I shouldn't have ran the Flask server that way. Because of that I assume CORS didn't load properly. Also, my print()s didn't always appear, because of that so it was also hard to debug stuff. This happened because by running the app via CTRL+ALT+N, VSCode focusses on the OUTPUT window instead of the TERMINAL window. Also, print()s that did appear in the OUTPUT window, don't support emojis like the TERMINAL window does. So my app crashed for the longest time until I figured it all out. Stupid mistake on my part though, should've known better. Hope this helps others!", "abstract": ""}, {"id": 71422680, "score": 2, "vote": 0, "content": "I think the problem is with preflighted requests.\nIt seems there's no effective way to disable the automatic answer to OPTIONS request if you're using @route @put @patch @delete decorators.\nmy workaround is the following snippet at the start of the api (before any decorated function)", "abstract": ""}, {"id": 70372112, "score": 1, "vote": 0, "content": "This is a pretty old and well-covered question already, but figured I'd contribute what I think is the simplest solution of the lot:", "abstract": ""}, {"id": 64657739, "score": 7, "vote": 0, "content": "I might be a late on this question but below steps fixed the issue", "abstract": ""}, {"id": 56542876, "score": 7, "vote": 0, "content": "Note: The placement of cross_origin should be right and dependencies are installed.\nOn the client side, ensure to specify kind of data server is consuming. For example application/json or text/html For me the code written below did magic", "abstract": ""}, {"id": 28339918, "score": 86, "vote": 0, "content": "It worked like a champ, after bit modification to your code  I replaced * by localhost. Since as I read in many blogs and posts, you should allow access for specific domain", "abstract": ""}, {"id": 46637194, "score": 132, "vote": 0, "content": "Well, I faced the same issue. For new users who may land at this page. \nJust follow their official documentation.  Install flask-cors then after app initialization, initialize flask-cors with default arguments:", "abstract": ""}, {"id": 51144784, "score": 2, "vote": 0, "content": "I used decorator given by Armin Ronacher with little modifications (due to different headers that are requested by the client).And that worked for me. (where I use angular as the requester requesting application/json type). The code is slightly modified at below places, jsonify will send a application/json type, else it will be text/html.\nheaders are added as the client in my case request for those headers", "abstract": ""}, {"id": 43825975, "score": 9, "vote": 0, "content": "Might as well make this an answer. I had the same issue today and it was more of a non-issue than expected. After adding the CORS functionality, you must restart your Flask server (ctrl + c -> python manage.py runserver, or whichever method you use)) in order for the change to take effect, even if the code is correct. Otherwise the CORS will not work in the active instance. Here's how it looks like for me and it works (Python 3.6.1, Flask 0.12): factory.py: views.py: In my React app console.log:", "abstract": ""}, {"id": 33091782, "score": 154, "vote": 0, "content": "You can get the results with a simple:", "abstract": ""}, {"id": 31956645, "score": 7, "vote": 0, "content": "Note that setting the Access-Control-Allow-Origin header in the Flask response object is fine in many cases (such as this one), but it has no effect when serving static assets (in a production setup, at least). That's because static assets are served directly by the front-facing web server (usually Nginx or Apache). So, in that case, you have to set the response header at the web server level, not in Flask. For more details, see this article that I wrote a while back, explaining how to set the headers (in my case, I was trying to do cross-domain serving of Font Awesome assets). Also, as @Satu said, you may need to allow access only for a specific domain, in the case of JS AJAX requests. For requesting static assets (like font files), I think the rules are less strict, and allowing access for any domain is more accepted.", "abstract": ""}, {"id": 28166046, "score": -1, "vote": 0, "content": "I struggled a lot with something similar. Try the following: If this doesn't help, take a look at this article. It's on PHP, but it describes exactly which headers must be set to which values for CORS to work. CORS That Works In IE, Firefox, Chrome And Safari", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/74583218/python-flask-cors-error-set-according-to-documentation", "keywords": [], "tags": ["python", "flask"], "question": {"id": 74583218, "title": "Python Flask Cors error - set according to documentation", "content": "I have created API using Flask in Python. Now I am trying to create front end, where I want to call API. I set CORS according Flask-Cors documentation, unfortunately it doesn't work. I got this error\nCORS error - Safari CORS error - Chrome I have found some similar topics, where was some solution. I have tried, but neither of them work for me. E.g. I have also tried cross_origin decorator, but it doesn't work as well. Could someone help me, how to solve this problem?", "abstract": ""}, "answers": [{"id": 74583496, "score": 0, "vote": 0, "content": "Make sure the URL you are trying to access begins with 'http://' or 'https://' according to your web server's configuration", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/71950802/flask-cors-work-only-for-first-request-whats-the-bug-in-my-code", "keywords": [], "tags": ["python", "flask", "cors", "werkzeug", "flask-cors"], "question": {"id": 71950802, "title": "Flask CORS work only for first request, what&#39;s the bug in my code?", "content": "There is a JS app serving at 127.0.0.1:8080, which refers some API serving at 127.0.0.1:5000 by a Flask app. [See FlaskCode] When I open this js app in Chrome, first request work well and the second request ends with CORS problem, [see ChromeDebug1]. Additionally, I found this 'OPTIONS' is response as 405 (method not allow) in Flask output, and the output from flask_cors is not same like first request. [see FlaskOut]. I'm a newbee in FE and python, so if it is stupid bug, please let me know. my env is It seems that flask_cors works only once in my code, but what's wrong? Look at the difference of first req and second req, seems that second reponse for 'OPTIONS' do not have headers (\"Access-Control-Allow-Origin\", \"*\")? why firest request not have log like flask_cors.extension:Request ====== second edit ========= Thanks for David's advice. I used tcp dump to capture networking, [See wireshark]. This OPTION request is standard in my opinion. So, it lead me to question 4. I have only one python file, and run it with python ./demo2.py --log=INFO  ", "abstract": ""}, "answers": [{"id": 72252314, "score": 4, "vote": 0, "content": "I was getting a similar error:\nparam1=value1&param2=value2GET /css/base.css HTTP/1.1\nwhere the leading params are from a POST request called just before. Setting threaded=False (as @david-k-hess suggested) helped. Fix 1 suggested by @david-k-hess: In Flask app.run(), add threaded=False Fix 2: It also seems that the problem was fixed by upgrading Flask and Werkzeug to 2.1.2 Other than that, my venv contains:", "abstract": ""}, {"id": 71955424, "score": 0, "vote": 0, "content": "The problem appears to be here: Compare that to: It is trying to use an invalid HTTP method of {\"examinationOID\":\"61e8d2248373a7329e12f29b\"}OPTIONS instead of just plain OPTIONS. It seems like something is corrupting your CORS headers and confusing Chrome into doing that. A likely source of that would be the Flask-CORS configuration. Is there some setup elsewhere that you haven't shown us? Or is it just using default configuration? If it is just default, then it would help to see the Javascript code running in Chrome - that might be causing the corrupted method from the first request to the second. Also, in your chrome dev tools screenshot, you are filtering on 'XHR' - that won't show the OPTIONS requests which will help you figure out what's going wrong. They are shown under 'Other'.", "abstract": ""}, {"id": 71955160, "score": 0, "vote": 0, "content": "I solve my problem with another \"bug\" like following. And I still have no idea why my code not work as flask_cors document saied. If you have better solution or advice, please let me know.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/71566073/flask-restful-and-angular-cors-error-on-post-method", "keywords": [], "tags": ["python", "mongodb", "rest", "flask", "cors"], "question": {"id": 71566073, "title": "Flask RESTful and Angular CORS Error on POST Method", "content": "I'm trying to submit a form on a Angular Web application using my Flask-RESTful api, but when i click \"submit\" i have a error with CORS. Everything runs fine on the GET and DELETE method. but POST, PUT, PATCH still getting CORS error.\nI scanned all the internet for possible solutions envolving FLASK_CORS and nothing works. even seting the to any origin (using: '/*') or making a Angular Proxy file..", "abstract": ""}, "answers": [{"id": 71566107, "score": 0, "vote": 0, "content": "You likely are having an issue with the preflight request that's being sent, so you need to pass supports_credentials=True or CORS_SUPPORTS_CREDENTIALS=True in your config. Here is what a preflight request is: https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request Flask CORS discussion: See here: https://github.com/corydolphin/flask-cors/issues/200", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/28461001/python-flask-cors-issue", "keywords": [], "tags": ["javascript", "jquery", "python", "ajax", "flask"], "question": {"id": 28461001, "title": "Python Flask Cors Issue", "content": "I am kind of new to Python, but I have had the same issue working with Node apps. I am making a pretty standard jQuery AJAX request to my local Python sever: I can confirm that the variable token is confirming like this: But I am getting this error from my javascript console: I have found that when I am building Node apps that this is a cors error. The page that I am running the jQuery AJAX request from is http. Here are the parts of my Python code that I believe I am configuring incorrectly: And the route: My Python error is also returning an error because the request is never making it to this line of code: I can fix that later. Anyway, does  anyone have any suggestions for Cors configurations for Python?", "abstract": ""}, "answers": [{"id": 70855102, "score": 0, "vote": 0, "content": "Please note that if your application returns a 500 error your browser may understand it as a cors error as flask cors only adds headers on return. So, if the other options don't work you can put your flask in debug mode to validate if it's not just an internal server error. .flaskenv", "abstract": ""}, {"id": 63669201, "score": 3, "vote": 0, "content": "I tried all of the above solutions and they kept failing for me.\nI am sure, most solutions would have worked, but there was one very obvious mistake I made in my client application. Maybe this saves some of you a bit of debugging time.\nI my request, I called my REST-service via The fix for me was as simple as calling the service as http... : A silly mistake.", "abstract": ""}, {"id": 60892414, "score": -2, "vote": 0, "content": "I have installed flask using the following command and using the declaration like this: pips3.6 install --user flask-cors", "abstract": ""}, {"id": 56542751, "score": 1, "vote": 0, "content": "On client side you only need to ensure that kind of data your server is dealing with.\nFor example form data or json. For me the code written below did magic", "abstract": ""}, {"id": 55307541, "score": 0, "vote": 0, "content": "Based on GyuHyeon Choi's response, but with added return response and an extra Access-Control-Expose-Headers worked for me.", "abstract": ""}, {"id": 48879046, "score": 8, "vote": 0, "content": "Please use @cross_origin(origin='*') in your python file", "abstract": ""}, {"id": 43019954, "score": 38, "vote": 0, "content": "After I tried others suggestions and answers. Here's what I use, which works. Steps: pip install flask flask-cors Copy and paste this in app.py file Code Note: be sure in your client's ajax configuration has the following: If one wonders, support_credentials=True just means it sends cookies along the payload back and forth.", "abstract": ""}, {"id": 41142073, "score": 17, "vote": 0, "content": "Flask has the flask-cors module.\nFollowing is the code snippet as well as the procedure. pip install -U flask-cors Add this lines in your flask application: See more by clicking on this link", "abstract": ""}, {"id": 35306232, "score": 1, "vote": 0, "content": "Try this: I've tried @cross_origin tutorial on the Flask website,however, it did not work for me. But it seems like you can add headers to your response later. Here is my remaining code that I think it may be useful.", "abstract": ""}, {"id": 29507390, "score": 7, "vote": 0, "content": "Here is how to get your hand dirty by handling the CORS detail all by yourself:", "abstract": ""}, {"id": 29422553, "score": 0, "vote": 0, "content": "The below solution worked for me. \nI included a method that will add the headers necessary for you and then raise the HTTP response. \nEx: Note: The above method is not python compiling so you may have to edit it.", "abstract": ""}, {"id": 28461217, "score": 4, "vote": 0, "content": "use the cors decorator after the route decorator. here's a snippet from the documentation... now, it appears you are using json, if that's the case, you should likely just read the documentation as it specifically mentions this use case, and what cors_headers to set... it's below the fold, but this documentation is well written and easy to understand. http://flask-cors.readthedocs.org/en/latest/#using-json-with-cors", "abstract": ""}]}]